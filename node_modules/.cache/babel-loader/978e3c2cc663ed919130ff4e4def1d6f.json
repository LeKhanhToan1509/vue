{"ast":null,"code":"import { createStore } from \"vuex\";\nimport createPersistedState from \"vuex-persistedstate\";\nconst store = createStore({\n  state: {\n    user: null,\n    cart: [],\n    products: []\n  },\n  mutations: {\n    loginUser(state, payload) {\n      state.user = payload;\n    },\n\n    logoutUser(state) {\n      state.user = null;\n    },\n\n    addToCart(state, payload) {\n      if (state.cart.length != 0) {\n        let item = state.cart.find(item => item._id === payload._id);\n\n        if (item) {\n          if (item.size === payload.size) {\n            if (item.quantity < 10) {\n              item.quantity += payload.quantity;\n            } else if (item.quantity >= 10) {\n              item.quantity = 10;\n            }\n          } else {\n            console.log(\"different size\");\n            state.cart = [...state.cart, payload];\n          }\n        } else {\n          state.cart = [...state.cart, payload];\n        }\n      } else {\n        state.cart = [...state.cart, payload];\n      }\n    },\n\n    deleteItem(state, payload) {\n      let index = state.cart.indexOf(payload);\n      state.cart.splice(index, 1);\n    },\n\n    updateQuantity(state, payload) {\n      if (payload.quantity > 0) {\n        let item = state.cart.find(item => item._id === payload._id && item.size === payload.size);\n        item.quantity = payload.quantity;\n      }\n    },\n\n    emptyCart(state) {\n      state.cart = [];\n    },\n\n    setProducts(state, payload) {\n      state.products = payload;\n    }\n\n  },\n  actions: {\n    set_user(context, payload) {\n      context.commit(\"loginUser\", payload);\n    },\n\n    remove_user(context) {\n      context.commit(\"logoutUser\");\n    },\n\n    add_to_cart(context, payload) {\n      context.commit(\"addToCart\", payload);\n    },\n\n    delete_item(context, payload) {\n      context.commit(\"deleteItem\", payload);\n    },\n\n    update_quantity(context, payload) {\n      context.commit(\"updateQuantity\", payload);\n    },\n\n    clear_cart(context) {\n      context.commit(\"emptyCart\");\n    },\n\n    set_products(context, payload) {\n      context.commit(\"setProducts\", payload);\n    }\n\n  },\n  getters: {\n    subtotal: state => {\n      let subtotal = 0;\n      state.cart.forEach(item => {\n        subtotal += item.price * item.quantity;\n      });\n      return subtotal;\n    },\n    getHash: state => {\n      var md5 = require(\"blueimp-md5/js/md5\");\n\n      var hash = md5(state.user.email);\n      return `https://www.gravatar.com/avatar/` + hash + `?d=mp`;\n    }\n  },\n  plugins: [createPersistedState()]\n});\nexport default store;","map":{"version":3,"sources":["D:/empty/BuyIt/src/store/store.js"],"names":["createStore","createPersistedState","store","state","user","cart","products","mutations","loginUser","payload","logoutUser","addToCart","length","item","find","_id","size","quantity","console","log","deleteItem","index","indexOf","splice","updateQuantity","emptyCart","setProducts","actions","set_user","context","commit","remove_user","add_to_cart","delete_item","update_quantity","clear_cart","set_products","getters","subtotal","forEach","price","getHash","md5","require","hash","email","plugins"],"mappings":"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","sourcesContent":["import { createStore } from \"vuex\";\nimport createPersistedState from \"vuex-persistedstate\";\n\nconst store = createStore({\n    state: {\n        user: null,\n        cart: [],\n        products: [],\n    },\n    mutations: {\n        loginUser(state, payload) {\n            state.user = payload;\n        },\n        logoutUser(state) {\n            state.user = null;\n        },\n        addToCart(state, payload) {\n            if (state.cart.length != 0) {\n                let item = state.cart.find((item) => item._id === payload._id);\n\n                if (item) {\n                    if (item.size === payload.size) {\n                        if (item.quantity < 10) {\n                            item.quantity += payload.quantity;\n                        } else if (item.quantity >= 10) {\n                            item.quantity = 10;\n                        }\n                    } else {\n                        console.log(\"different size\");\n                        state.cart = [...state.cart, payload];\n                    }\n                } else {\n                    state.cart = [...state.cart, payload];\n                }\n            } else {\n                state.cart = [...state.cart, payload];\n            }\n        },\n        deleteItem(state, payload) {\n            let index = state.cart.indexOf(payload);\n            state.cart.splice(index, 1);\n        },\n        updateQuantity(state, payload) {\n            if (payload.quantity > 0) {\n                let item = state.cart.find(\n                    (item) =>\n                        item._id === payload._id && item.size === payload.size\n                );\n                item.quantity = payload.quantity;\n            }\n        },\n        emptyCart(state) {\n            state.cart = [];\n        },\n        setProducts(state, payload) {\n            state.products = payload;\n        },\n    },\n    actions: {\n        set_user(context, payload) {\n            context.commit(\"loginUser\", payload);\n        },\n        remove_user(context) {\n            context.commit(\"logoutUser\");\n        },\n        add_to_cart(context, payload) {\n            context.commit(\"addToCart\", payload);\n        },\n        delete_item(context, payload) {\n            context.commit(\"deleteItem\", payload);\n        },\n        update_quantity(context, payload) {\n            context.commit(\"updateQuantity\", payload);\n        },\n        clear_cart(context) {\n            context.commit(\"emptyCart\");\n        },\n        set_products(context, payload) {\n            context.commit(\"setProducts\", payload);\n        },\n    },\n    getters: {\n        subtotal: (state) => {\n            let subtotal = 0;\n            state.cart.forEach((item) => {\n                subtotal += item.price * item.quantity;\n            });\n            return subtotal;\n        },\n        getHash: (state) => {\n            var md5 = require(\"blueimp-md5/js/md5\");\n            var hash = md5(state.user.email);\n            return `https://www.gravatar.com/avatar/` + hash + `?d=mp`;\n        },\n    },\n    plugins: [createPersistedState()],\n});\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}